View(data.wide2)
data.wide <- spread(data.long, Var2, Freq)
data.wide2 <- gather(data.long,Var2)
data.wide <- spread(data.long, Var2)
names(data.long)
data.wide <- spread(data.long, "Var2")
data.wide <- spread(data.long, Var2)
data.wide <- spread(data.long, key=Var2, value = values)
data.wide <- spread(data.long, key=Var2)
?spread
names(data.long)
data.wide3 <-  reshape(data.long,
idvar = "Var2",
timevar = "Freq",
direction = "wide")
View(data.wide3)
data.wide3 <-  reshape(data.long,
idvar = "Var2",
direction = "wide")
names(data.long)
data.wide3 <- reshape(data.long,
idvar = "Var1",
timevar = "Var2",
direction = "wide")
View(data.wide3)
data.wide3 <- reshape(data.long,
idvar = "Despedício (kg per capta)",
timevar = "Pib per capta",
direction = "wide")
data.wide3 <- reshape(data.long,
"Despedício (kg per capta)",
"Pib per capta",
"Escolaridade (anos)",
direction = "wide")
data.wide <- spread(data.long, "Despedício (kg per capta)","Escolaridade (anos)")
data.wide3 <- reshape(data.long,
"Despedício (kg per capta)",
"Pib per capta",
"Escolaridade (anos)",
direction = "wide")
?reshapeWide
?reshape
library(cluster)#cluster
library(factoextra) #cluster
library(fpc) #algoritmo de cluster e visualizacao
library(gridExtra) #para a funcao grid arrange
load('dataCluster1.RData')
dataCluster1 <- rename(dataCluster1, waste = 'Household estimate (kg/capita/year)',
PIBcapta = 'Pib per capta',
Escolaridade = 'escolaridade anos')
library(dplyr)
dataCluster1 <- rename(dataCluster1, waste = 'Household estimate (kg/capita/year)',
PIBcapta = 'Pib per capta',
Escolaridade = 'escolaridade anos')
dataCluster1 <- transform(dataCluster1, waste = as.numeric(waste),
PIBcapta = as.numeric(PIBcapta),
Escolaridade = as.numeric(Escolaridade)
)
dataCluster1 <- scale(dataCluster1)# padronizando
#testeando algumas opções
dataCluster1.k3 <- kmeans(dataCluster1, centers = 3)
dataCluster1.k4 <- kmeans(dataCluster1, centers = 4)
dataCluster1.k5 <- kmeans(dataCluster1, centers = 5)
dataCluster1.k6 <- kmeans(dataCluster1, centers = 6)
#Gráficos
G1 <- fviz_cluster(dataCluster1.k3, geom = "point", data = dataCluster1) + ggtitle("k = 3")
G2 <- fviz_cluster(dataCluster1.k4, geom = "point", data = dataCluster1) + ggtitle("k = 4")
G3 <- fviz_cluster(dataCluster1.k5, geom = "point", data = dataCluster1) + ggtitle("k = 5")
G4 <- fviz_cluster(dataCluster1.k6, geom = "point", data = dataCluster1) + ggtitle("k = 6")
#Criar uma matriz com 4 graficos
grid.arrange(G1, G2, G3, G4, nrow = 2)
#Gráficos
G1 <- fviz_cluster(dataCluster1.k3, geom = "point", data = dataCluster1) + ggtitle("k = 3")
G2 <- fviz_cluster(dataCluster1.k4, geom = "point", data = dataCluster1) + ggtitle("k = 4")
G3 <- fviz_cluster(dataCluster1.k5, geom = "point", data = dataCluster1) + ggtitle("k = 5")
G4 <- fviz_cluster(dataCluster1.k6, geom = "text", data = dataCluster1) + ggtitle("k = 6")
#Criar uma matriz com 4 graficos
grid.arrange(G1, G2, G3, G4, nrow = 2)
#Criar uma matriz com 4 graficos
grid.arrange( G4, nrow = 2)
#Criar uma matriz com 4 graficos
grid.arrange( G4, nrow = 1)
#VERIFICANDO ELBOW
fviz_nbclust(dataCluster1, FUN = hcut, method = "wss")
fviz_nbclust(dataCluster1, FUN = hcut, method = "silhouette")
fviz_nbclust(dataCluster1, FUN = hcut, method = "gap_stat")
?fviz
library(plotly)
View(dataCluster1.k3)
summarise(dataCluster1)
summary(dataCluster1)
View(dataCluster1)
load(dataCluster.RData)
load(dataCluster1.RData)
load('dataCluster1.RData')
View(head(dataCluster1))
install.packages('dt')
y
yes
install.packages('DT')
library('DT')
tabela <- datatable(dataCluster1)
View(tabela)
plot(dataCluster1)
?factoextra
??factoextra
library(cluster)#cluster
library(factoextra) #cluster
library(fpc) #algoritmo de cluster e visualizacao
library(gridExtra) #para a funcao grid arrange
load('dataCluster1.RData')
dataCluster1 <- rename(dataCluster1, waste = 'Household estimate (kg/capita/year)',
PIBcapta = 'Pib per capta',
Escolaridade = 'escolaridade anos')
dataCluster1 <- transform(dataCluster1, waste = as.numeric(waste),
PIBcapta = as.numeric(PIBcapta),
Escolaridade = as.numeric(Escolaridade)
)
dataCluster1 <- scale(dataCluster1)# padronizando
#testeando algumas opções
dataCluster1.k3 <- kmeans(dataCluster1, centers = 3)
dataCluster1.k4 <- kmeans(dataCluster1, centers = 4)
dataCluster1.k5 <- kmeans(dataCluster1, centers = 5)
dataCluster1.k6 <- kmeans(dataCluster1, centers = 6)
#Gráficos
G1 <- fviz_cluster(dataCluster1.k3, geom = "point", data = dataCluster1) + ggtitle("k = 3")
G2 <- fviz_cluster(dataCluster1.k4, geom = "point", data = dataCluster1) + ggtitle("k = 4")
G3 <- fviz_cluster(dataCluster1.k5, geom = "point", data = dataCluster1) + ggtitle("k = 5")
#Criar uma matriz com 4 graficos
grid.arrange(G1, G2, G3, G4, nrow = 2)
G4 <- fviz_cluster(dataCluster1.k6, geom = "point", data = dataCluster1) + ggtitle("k = 6")
#Criar uma matriz com 4 graficos
grid.arrange(G1, G2, G3, G4, nrow = 2)
G6 <- fviz_cluster(dataCluster1.k6, geom = "text", data = dataCluster1) + ggtitle("k = 6")
grid.arrange(G6, nrow = 1)
View(G6)
G6[["labels"]][["label"]]
?fviz_cluster
G6 <- fviz_cluster(dataCluster1.k6, geom = "text", data = dataCluster1, labelsize = 5) + ggtitle("k = 6")
grid.arrange(G6, nrow = 1)
G6 <- fviz_cluster(dataCluster1.k6, geom = "text", data = dataCluster1, labelsize = 12) + ggtitle("k = 6")
grid.arrange(G6, nrow = 1)
G6 <- fviz_cluster(dataCluster1.k6, geom = "text", data = dataCluster1, labelsize = 5) + ggtitle("k = 6")
grid.arrange(G6, nrow = 1)
G6 <- fviz_cluster(dataCluster1.k6, geom = "text", data = dataCluster1, labelsize = 10) + ggtitle("k = 6")
grid.arrange(G6, nrow = 1)
G6 <- fviz_cluster(dataCluster1.k6, geom = "text", data = dataCluster1, stand = TRUE) + ggtitle("k = 6")
grid.arrange(G6, nrow = 1)
G6 <- fviz_cluster(dataCluster1.k6, geom = c("point","text"), data = dataCluster1, stand = TRUE) + ggtitle("k = 6")
grid.arrange(G6, nrow = 1)
G6 <- fviz_cluster(dataCluster1.k6, geom = "text", repel = TRUE data = dataCluster1, stand = TRUE) + ggtitle("k = 6")
grid.arrange(G6, nrow = 1)
G6 <- fviz_cluster(dataCluster1.k6, geom = "text", repel = TRUE, data = dataCluster1) + ggtitle("k = 6")
grid.arrange(G6, nrow = 1)
long <- summary(dataCluster1)
View(long)
tabelaBonita <- reshape(data = long, idvar = "Var1", timevar = "Var2", direction = "wide")
long2 <- long[c(1:18),1]
c(1:18)
long2 <- long[c(1:18),1]
long2 <- long[c(1:17),1]
long2 <- long[c(1:19),1]
scan(long)
long2 <- scan(long)
long2 <- long
long2['Var'] <- c(1:18)
View(long2)
long2 <- long
long2['Var1'] <- c(1:18)
View(long2)
long2 <- long
long2['Var'] <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17)
View(long2)
long2
long2 <- summary(dataCluster1)
tabelaBonita <- reshape(data = long2, idvar = "Var", timevar = "Var2", direction = "wide")
tabelaBonita <- reshape(data = long2, idvar = "Var1", timevar = "Var2", direction = "wide")
long2 <- long
long2['Var'] <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17)
long2['Var'] <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)
long2 <- long
long2['Var'] <- c(set.seed(length(long2)))
long2['Var'] <- c(set.seed(length('Var1')))
long2['Var'] <- c(set.seed(length('Var2')))
long2['Var'] <- c(set.seed(length(long,x='Var1')))
dim(long)
length(long)
long2['Var'] <- c(set.seed(length(long)))
long2['Var'] <- c(set.seed(18)))
long2['Var'] <- c(set.seed(18))
class(long2)
long2["Var"] <- c((1:18))
long2 <- as.data.frame(long2)
dimnames(long2)
long <- summary(dataCluster1)
tabelaBonita <- reshape(data = long, idvar = rownames(long), timevar = "Var2", direction = "wide")
View(long)
vetor <- c(1:18)
vetor <- c(list(1:18))
View(vetor)
long2 <- long
long2["Var"] <- c(list(1:18))
View(long2)
tabelaBonita <- reshape(data = long2, idvar = "Var", timevar = "Var2", direction = "wide")
long2 <- as.table(long2)
long2 <- as.data.frame(long2)
tabelaBonita <- reshape(data = long2, idvar = "Var", timevar = "Var2", direction = "wide")
View(long2)
tabelaBonita <- summary_table(dplyr::group_by(long, Var2), our_summary1)
tabelaBonita <- summary_table(dplyr::group_by(long, Var2))
library(qwraps2)
install.packages("qwraps2")
library(qwraps2)
tabelaBonita <- summary_table(dplyr::group_by(long, Var2))
class(long)
tabelaBonita <- summary_table(long)
View(long2)
long2 <- long
long2 <- as.data.frame(long2)
View(long2)
tabelaBonita <- reshape(data = long2, idvar = "Var", timevar = "Var2", direction = "wide")
long2["Var"] <- c(list(1:18))
tabelaBonita <- reshape(data = long2, idvar = "Var", timevar = "Var2", direction = "wide")
View(tabelaBonita)
#########
long <- summary(dataCluster1)
long2 <- long
long2 <- as.data.frame(long2)
long2["Var"] <- c(list(1:18))
View(long2)
tabelaBonita <- reshape(data = long2, idvar = "Var", timevar = "Var2", direction = "wide")
View(tabelaBonita)
tabelaBonita <- reshape(data = long2, idvar = "Var", timevar = "Freq", direction = "wide")
View(tabelaBonita)
#Criar uma matriz com 4 graficos
grid.arrange(G1, G2, G3, G4, nrow = 2)
dataSetcluster <- head(dataCluster1)
dataSetcluster
load('dataCluster1.RData')
dataSetcluster <- head(dataCluster1)
dataSetcluster
dataSetcluster$`Household estimate (kg/capita/year)`
dataSetcluster
#Pacotes
install.packages("readxl")
install.packages("dplyr")
install.packages("tidyverse")
library(readxl)
library(dplyr)
library(tidyverse)
install.packages("dplyr")
####Carregando os dados iniciais
#base de dados, referência casa
base_dados_house <-  read_excel("DATA_WASTE.xlsx", sheet=5, )
#base de dados, referência serviço
base_dados_service <- read_excel("DATA_WASTE.xlsx", sheet=6, col_names=TRUE)
#base de dados, referência varejo (retalho?)
base_dados_retail <- read_excel("DATA_WASTE.xlsx", sheet=7, col_names=TRUE)
View(head(base_dados_house))
new <-  base_dados_house[-c(1), ]
#renomeando as colunas
new_base_dados_house<-setNames(base_dados_house, c('Region', 'M49 code', 'Country',
'Household estimate (kg/capita/year)',
'Household estimate (tonnes/year)',
'Confidence in estimate'))
#apagando linha 1 duplicada do título
new_base_dados_house <- new_base_dados_house[-c(1),]
new_base_dados_retail<-setNames(base_dados_retail, c('Region','M49 code','Country',
'Retail estimate (kg/capita/year)',
'Retail estimate (tonnes/year)',
'Confidence in estimate'))
#apagando linha 1 duplicada do título
new_base_dados_retail <- new_base_dados_retail[-c(1),]
#renomeando as colunas da base service
new_base_dados_service<-setNames(base_dados_service, c('Region','M49 code','Country',
'Food service estimate (kg/capita/year)',
'Food service estimate (tonnes/year)',
'Confidence in estimate'))
#apagando linha 1 duplicada do título
new_base_dados_service <- new_base_dados_service[-c(1),]
save(new_base_dados_house, file = 'houseWaste.RData')
save(new_base_dados_retail, file = 'retailWaste.RData')
save(new_base_dados_service, file = 'seviceWaste.RData')
load('houseWaste.RData')
load('retailWaste.RData')
load('seviceWaste.RData')
load('gdpCapta.RData')
load('gdpTotal.RData')
load('base_education.RData')
sumWaste <- left_join(new_base_dados_house, new_base_dados_retail)
sumWaste <- left_join(sumWaste,new_base_dados_service)
save(sumWaste, file = 'sumWaste.RData')
sumWaste <- sumWaste[,-c(1,2,5,6,8,10)]
######################################
#Retirando Na da base
sumWaste_Na <- na.omit(sumWaste)
sumWaste_Na <- as.data.frame(sumWaste_Na)
rownames(sumWaste_Na) <- sumWaste_Na[,1]
sumWaste_Na <-sumWaste_Na[,-1]
#converter em numeric
sumWaste_Na[] <- lapply(sumWaste_Na, function(x) as.numeric(as.character(x)))
#Padronizar variaveis
sumWaste_Na.padro <- scale(sumWaste_Na)
#Agora vamos rodar de 3 a 6 centros  e visualizar qual a melhor divisao
sumwaste.k3 <- kmeans(sumWaste_Na.padro, centers = 3)
sumwaste.k4 <- kmeans(sumWaste_Na.padro, centers = 4)
#Graficos
G1 <- fviz_cluster(sumwaste.k3, geom = "point", data = sumWaste_Na.padro) + ggtitle("k = 3")
G2 <- fviz_cluster(sumwaste.k4, geom = "point",  data = sumWaste_Na.padro) + ggtitle("k = 4")
#Criar uma matriz com 4 graficos
grid.arrange(G1, G2, nrow = 2)
#VERIFICANDO ELBOW
fviz_nbclust(sumWaste_Na.padro, FUN = hcut, method = "wss")
#Criar uma matriz com 4 graficos
grid.arrange(G1, G2, nrow = 2)
library(cluster)#cluster
library(factoextra) #cluster
library(fpc) #algoritmo de cluster e visualizacao
library(gridExtra) #para a funcao grid arrange
load('dataCluster1.RData')
dataCluster1 <- rename(dataCluster1, waste = 'Household estimate (kg/capita/year)',
PIBcapta = 'Pib per capta',
Escolaridade = 'escolaridade anos')
dataCluster1 <- transform(dataCluster1, waste = as.numeric(waste),
PIBcapta = as.numeric(PIBcapta),
Escolaridade = as.numeric(Escolaridade)
)
dataCluster1 <- scale(dataCluster1)# padronizando
#testeando algumas opções
dataCluster1.k3 <- kmeans(dataCluster1, centers = 3)
dataCluster1.k4 <- kmeans(dataCluster1, centers = 4)
dataCluster1.k5 <- kmeans(dataCluster1, centers = 5)
dataCluster1.k6 <- kmeans(dataCluster1, centers = 6)
#Gráficos
G1 <- fviz_cluster(dataCluster1.k3, geom = "point", data = dataCluster1) + ggtitle("k = 3")
G2 <- fviz_cluster(dataCluster1.k4, geom = "point", data = dataCluster1) + ggtitle("k = 4")
G3 <- fviz_cluster(dataCluster1.k5, geom = "point", data = dataCluster1) + ggtitle("k = 5")
G4 <- fviz_cluster(dataCluster1.k6, geom = "point", data = dataCluster1) + ggtitle("k = 6")
#Criar uma matriz com 4 graficos
grid.arrange(G1, G2, G3, G4, nrow = 2)
#VERIFICANDO ELBOW
fviz_nbclust(dataCluster1, FUN = hcut, method = "wss")
fviz_nbclust(dataCluster1, FUN = hcut, method = "silhouette")
fviz_nbclust(dataCluster1, FUN = hcut, method = "gap_stat")
G6 <- fviz_cluster(dataCluster1.k6, geom = "text", repel = TRUE, data = dataCluster1) + ggtitle("k = 6")
grid.arrange(G6, nrow = 1)
library(cluster)#cluster
library(factoextra) #cluster
library(fpc) #algoritmo de cluster e visualizacao
library(gridExtra) #para a funcao grid arrange
load('dataCluster1.RData')
load('dataCluster1.RData')
dataCluster1 <- rename(dataCluster1, waste = 'Household estimate (kg/capita/year)',
PIBcapta = 'Pib per capta',
Escolaridade = 'escolaridade anos')
dataCluster1 <- transform(dataCluster1, waste = as.numeric(waste),
PIBcapta = as.numeric(PIBcapta),
Escolaridade = as.numeric(Escolaridade)
)
dataCluster1 <- scale(dataCluster1)# padronizando
#testeando algumas opções
dataCluster1.k3 <- kmeans(dataCluster1, centers = 3)
dataCluster1.k4 <- kmeans(dataCluster1, centers = 4)
dataCluster1.k5 <- kmeans(dataCluster1, centers = 5)
dataCluster1.k6 <- kmeans(dataCluster1, centers = 6)
#Gráficos
G1 <- fviz_cluster(dataCluster1.k3, geom = "point", data = dataCluster1) + ggtitle("k = 3")
G2 <- fviz_cluster(dataCluster1.k4, geom = "point", data = dataCluster1) + ggtitle("k = 4")
G3 <- fviz_cluster(dataCluster1.k5, geom = "point", data = dataCluster1) + ggtitle("k = 5")
G4 <- fviz_cluster(dataCluster1.k6, geom = "point", data = dataCluster1) + ggtitle("k = 6")
#Criar uma matriz com 4 graficos
grid.arrange(G1, G2, G3, G4, nrow = 2)
G6 <- fviz_cluster(dataCluster1.k6, geom = "text", repel = TRUE, data = dataCluster1) + ggtitle("k = 6")
grid.arrange(G6, nrow = 1)
dbscan <- fpc::dbscan(dataCluster1,eps = 0.56, MinPts = 3)
dbscan <- fpc::dbscan(dataCluster1,eps = 0.56, MinPts = 3)
head(dataCluster1)
#visualizando em cores os clusters
dataCluster1 %>% ggplot() +
geom_point(aes(x = Atuaria,
y = Mkt,
color = as.factor(dbscan)),
size = 3)
graficobolinhas <- fpc::dbscan(notas_alunos_pad,eps = 0.56, MinPts = 3)
graficobolinhas <- fpc::dbscan(dataCluster1,eps = 0.56, MinPts = 3)
plot(graficobolinhas, cex = 0.6, hang = -1)
plot(graficobolinhas)
cluster.hierarquico.waste <- hclust(dataCluster1, method = "single" )
head(dataCluster1)
cluster.hierarquico.waste <- dist(dataCluster1, method = "euclidean")
cluster.hierarquico.waste2 <- hclust(cluster.hierarquico.waste , method = "single" )
plot(cluster.hierarquico.waste2, cex = 0.6, hang = -1)
?hclust
cluster.hierarquico.waste2 <- hclust(cluster.hierarquico.waste , method = "ward.D" )
plot(cluster.hierarquico.waste2, cex = 0.6, hang = -1)
?hclust
cluster.hierarquico.waste2 <- hclust(cluster.hierarquico.waste , method = "complete" )
plot(cluster.hierarquico.waste2, cex = 0.6, hang = -1)
?hclust
cluster.hierarquico.waste2 <- hclust(cluster.hierarquico.waste , method = "centroid" )
plot(cluster.hierarquico.waste2, cex = 0.6, hang = -1)
?hclust
cluster.hierarquico.waste2 <- hclust(cluster.hierarquico.waste , method = "average" )
plot(cluster.hierarquico.waste2, cex = 0.6, hang = -1)
?hclust
cluster.hierarquico.waste2 <- hclust(cluster.hierarquico.waste , method = "mcquitty" )
plot(cluster.hierarquico.waste2, cex = 0.6, hang = -1)
?hclust
cluster.hierarquico.waste2 <- hclust(cluster.hierarquico.waste , method = "ward.D2" )
plot(cluster.hierarquico.waste2, cex = 0.6, hang = -1)
?fviz_cluster
library(tidyverse)
library(rvest)
library(magrittr)
library(ggmap)
library(stringr)
library(ggplot2)
load('dataCluster1.RData')
#renomeado coluna dos paises
dataCluster1MAPA<- dataCluster1
dataCluster1MAPA<-tibble::rownames_to_column(dataCluster1MAPA, "pais")
#Renomeando paises para igualar denominação do WB
datacluster2MAPA <- dataCluster1MAPA
datacluster2MAPA$pais[datacluster2MAPA$pais == "Aruba"] <- "Aruba (Neth.)"
datacluster2MAPA$pais[datacluster2MAPA$pais == "Bahamas"] <- "Bahamas, The"
datacluster2MAPA$pais[datacluster2MAPA$pais == "Bermuda"] <- "Bermuda (UK)"
datacluster2MAPA$pais[datacluster2MAPA$pais == "Cayman Islands"] <- "Cayman Islands (UK)"
datacluster2MAPA$pais[datacluster2MAPA$pais == "Czechia"] <- "Czech Republic"
datacluster2MAPA$pais[datacluster2MAPA$pais == "Egypt"] <- "Egypt, Arab Republic of"
datacluster2MAPA$pais[datacluster2MAPA$pais == "Gambia"] <- "Gambia, The"
datacluster2MAPA$pais[datacluster2MAPA$pais == "Greenland"] <- "Greenland (Den.)"
datacluster2MAPA$pais[datacluster2MAPA$pais == "Iran (Islamic Republic of)"] <- "Iran, Islamic Republic of"
datacluster2MAPA$pais[datacluster2MAPA$pais == "Puerto Rico"] <- "Puerto Rico (US)"
datacluster2MAPA$pais[datacluster2MAPA$pais == "Republic of Korea"] <- "Korea, Republic of"
datacluster2MAPA$pais[datacluster2MAPA$pais == "Republic of Moldova"] <- "Moldova"
datacluster2MAPA$pais[datacluster2MAPA$pais == "Slovakia"] <- "Slovak Republic"
datacluster2MAPA$pais[datacluster2MAPA$pais == "Viet Nam"] <- "Vietnam"
#shapefile do world bank
shp_mundo_BK <- readOGR(dsn = "worldbank_countries", layer = "WB_countries_Admin0_10m")
mapaMundo_BK <- merge(x= shp_mundo_BK,
y= datacluster2MAPA,
by.x="WB_NAME",
by.y="pais")
shp_dados_novo_BK <- tidy(mapaMundo_BK, region = "WB_NAME") %>%
rename(WB_NAME = id) %>%
left_join(mapaMundo_BK@data,
by = "WB_NAME")
library(tidyverse)
pacotes <- c("rgdal","raster","tmap","maptools","sf","rgeos","sp","adehabitatHR",
"tidyverse","broom","rayshader","knitr","kableExtra","RColorBrewer",
"profvis")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
install.packages("ggmap")
install.packages("ggmap")
install.packages("rvest")
install.packages("rvest")
library(tidyverse)
library(rvest)
library(magrittr)
library(ggmap)
library(stringr)
library(ggplot2)
load('dataCluster1.RData')
#renomeado coluna dos paises
dataCluster1MAPA<- dataCluster1
dataCluster1MAPA<-tibble::rownames_to_column(dataCluster1MAPA, "pais")
#Renomeando paises para igualar denominação do WB
datacluster2MAPA <- dataCluster1MAPA
datacluster2MAPA$pais[datacluster2MAPA$pais == "Aruba"] <- "Aruba (Neth.)"
datacluster2MAPA$pais[datacluster2MAPA$pais == "Bahamas"] <- "Bahamas, The"
datacluster2MAPA$pais[datacluster2MAPA$pais == "Bermuda"] <- "Bermuda (UK)"
datacluster2MAPA$pais[datacluster2MAPA$pais == "Cayman Islands"] <- "Cayman Islands (UK)"
datacluster2MAPA$pais[datacluster2MAPA$pais == "Czechia"] <- "Czech Republic"
datacluster2MAPA$pais[datacluster2MAPA$pais == "Egypt"] <- "Egypt, Arab Republic of"
datacluster2MAPA$pais[datacluster2MAPA$pais == "Gambia"] <- "Gambia, The"
datacluster2MAPA$pais[datacluster2MAPA$pais == "Greenland"] <- "Greenland (Den.)"
datacluster2MAPA$pais[datacluster2MAPA$pais == "Iran (Islamic Republic of)"] <- "Iran, Islamic Republic of"
datacluster2MAPA$pais[datacluster2MAPA$pais == "Puerto Rico"] <- "Puerto Rico (US)"
datacluster2MAPA$pais[datacluster2MAPA$pais == "Republic of Korea"] <- "Korea, Republic of"
datacluster2MAPA$pais[datacluster2MAPA$pais == "Republic of Moldova"] <- "Moldova"
datacluster2MAPA$pais[datacluster2MAPA$pais == "Slovakia"] <- "Slovak Republic"
datacluster2MAPA$pais[datacluster2MAPA$pais == "Viet Nam"] <- "Vietnam"
#shapefile do world bank
shp_mundo_BK <- readOGR(dsn = "worldbank_countries", layer = "WB_countries_Admin0_10m")
mapaMundo_BK <- merge(x= shp_mundo_BK,
y= datacluster2MAPA,
by.x="WB_NAME",
by.y="pais")
shp_dados_novo_BK <- tidy(mapaMundo_BK, region = "WB_NAME") %>%
rename(WB_NAME = id) %>%
left_join(mapaMundo_BK@data,
by = "WB_NAME")
#A plotagem desperdício.
shp_dados_novo_BK %>%
ggplot() +
geom_polygon(aes(x = long, y = lat, group = group, fill = waste),
color = "black", size = 0.15) +
labs(x = "Longitude",
y = "Latitude",
fill = "Desperdício") +
scale_fill_viridis_c(option = "H")+
theme_bw()
view(datacluster2MAPA)
?readOGR
